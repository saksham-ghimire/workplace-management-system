# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from .  import structure_pb2


class RouterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchMetaData = channel.unary_unary(
                '/grpcRouter.Router/FetchMetaData',
                request_serializer=structure_pb2.MetaDataRequest.SerializeToString,
                response_deserializer=structure_pb2.MetaDataResponse.FromString,
                )
        self.PerformMetaAction = channel.unary_unary(
                '/grpcRouter.Router/PerformMetaAction',
                request_serializer=structure_pb2.MetaActionRequest.SerializeToString,
                response_deserializer=structure_pb2.MetaActionResponse.FromString,
                )
        self.CommunicationChannel = channel.stream_unary(
                '/grpcRouter.Router/CommunicationChannel',
                request_serializer=structure_pb2.StreamRequest.SerializeToString,
                response_deserializer=structure_pb2.EmptyResponse.FromString,
                )


class RouterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FetchMetaData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformMetaAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommunicationChannel(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FetchMetaData': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchMetaData,
                    request_deserializer=structure_pb2.MetaDataRequest.FromString,
                    response_serializer=structure_pb2.MetaDataResponse.SerializeToString,
            ),
            'PerformMetaAction': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformMetaAction,
                    request_deserializer=structure_pb2.MetaActionRequest.FromString,
                    response_serializer=structure_pb2.MetaActionResponse.SerializeToString,
            ),
            'CommunicationChannel': grpc.stream_unary_rpc_method_handler(
                    servicer.CommunicationChannel,
                    request_deserializer=structure_pb2.StreamRequest.FromString,
                    response_serializer=structure_pb2.EmptyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcRouter.Router', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Router(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FetchMetaData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcRouter.Router/FetchMetaData',
            structure_pb2.MetaDataRequest.SerializeToString,
            structure_pb2.MetaDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PerformMetaAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcRouter.Router/PerformMetaAction',
            structure_pb2.MetaActionRequest.SerializeToString,
            structure_pb2.MetaActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommunicationChannel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/grpcRouter.Router/CommunicationChannel',
            structure_pb2.StreamRequest.SerializeToString,
            structure_pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
