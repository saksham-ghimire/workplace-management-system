// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: structure.proto

package grpcRouter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	FetchMetaData(ctx context.Context, in *MetaDataRequest, opts ...grpc.CallOption) (*MetaDataResponse, error)
	PerformMetaAction(ctx context.Context, in *MetaActionRequest, opts ...grpc.CallOption) (*MetaActionResponse, error)
	CommunicationChannel(ctx context.Context, opts ...grpc.CallOption) (Router_CommunicationChannelClient, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) FetchMetaData(ctx context.Context, in *MetaDataRequest, opts ...grpc.CallOption) (*MetaDataResponse, error) {
	out := new(MetaDataResponse)
	err := c.cc.Invoke(ctx, "/grpcRouter.Router/FetchMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) PerformMetaAction(ctx context.Context, in *MetaActionRequest, opts ...grpc.CallOption) (*MetaActionResponse, error) {
	out := new(MetaActionResponse)
	err := c.cc.Invoke(ctx, "/grpcRouter.Router/PerformMetaAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) CommunicationChannel(ctx context.Context, opts ...grpc.CallOption) (Router_CommunicationChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &Router_ServiceDesc.Streams[0], "/grpcRouter.Router/CommunicationChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerCommunicationChannelClient{stream}
	return x, nil
}

type Router_CommunicationChannelClient interface {
	Send(*StreamRequest) error
	CloseAndRecv() (*EmptyResponse, error)
	grpc.ClientStream
}

type routerCommunicationChannelClient struct {
	grpc.ClientStream
}

func (x *routerCommunicationChannelClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routerCommunicationChannelClient) CloseAndRecv() (*EmptyResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility
type RouterServer interface {
	FetchMetaData(context.Context, *MetaDataRequest) (*MetaDataResponse, error)
	PerformMetaAction(context.Context, *MetaActionRequest) (*MetaActionResponse, error)
	CommunicationChannel(Router_CommunicationChannelServer) error
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (UnimplementedRouterServer) FetchMetaData(context.Context, *MetaDataRequest) (*MetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMetaData not implemented")
}
func (UnimplementedRouterServer) PerformMetaAction(context.Context, *MetaActionRequest) (*MetaActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformMetaAction not implemented")
}
func (UnimplementedRouterServer) CommunicationChannel(Router_CommunicationChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method CommunicationChannel not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_FetchMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).FetchMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcRouter.Router/FetchMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).FetchMetaData(ctx, req.(*MetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_PerformMetaAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).PerformMetaAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcRouter.Router/PerformMetaAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).PerformMetaAction(ctx, req.(*MetaActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_CommunicationChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouterServer).CommunicationChannel(&routerCommunicationChannelServer{stream})
}

type Router_CommunicationChannelServer interface {
	SendAndClose(*EmptyResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type routerCommunicationChannelServer struct {
	grpc.ServerStream
}

func (x *routerCommunicationChannelServer) SendAndClose(m *EmptyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routerCommunicationChannelServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcRouter.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchMetaData",
			Handler:    _Router_FetchMetaData_Handler,
		},
		{
			MethodName: "PerformMetaAction",
			Handler:    _Router_PerformMetaAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommunicationChannel",
			Handler:       _Router_CommunicationChannel_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "structure.proto",
}
